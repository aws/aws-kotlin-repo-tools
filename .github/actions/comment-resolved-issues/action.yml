name: 'Comment on Resolved Issues'
description: 'Comments on issues referenced in PRs merged since last release'

inputs:
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.
    default: ${{ github.token }}
    required: false

runs:
  using: composite
  steps:
    - name: Comment on issues
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token }}
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | sed -n '2p')
        CURRENT_TAG=$(git tag --sort=-version:refname | sed -n '1p')

        # Convert tag date to GitHub search format
        TAG_DATE=$(git log -1 --format="%ci" "$PREVIOUS_TAG" | sed 's/ /T/' | sed 's/ +0000/Z/')
        echo "Using tag date: $TAG_DATE"
        
        # Find all PRs merged from the last release tag date
        ALL_PRS=$(gh pr list \
          --state merged \
          --json number,body,mergedAt \
          --jq '[.[] | select(.mergedAt > "'$TAG_DATE'") | .number]' 
        )
        
        # Find all issue number from PRs merged into release branch
        ISSUE_NUMBERS=""
        for pr_number in $(echo "$ALL_PRS" | jq -r '.[]'); do
        
          # Get the merge commit SHA for this PR
          MERGE_COMMIT=$(gh pr view "$pr_number" --json mergeCommit --jq '.mergeCommit.oid')
        
          # Check if this commit exists in the release branch
          if git merge-base --is-ancestor "$MERGE_COMMIT" origin/release 2>/dev/null; then
            echo "PR $pr_number is in release branch"
        
            # Get issue numbers from this PR
            PR_ISSUES=$(gh pr view "$pr_number" --json body --jq '.body' | \
              grep -o 'issues/[0-9]*' | \
              sed 's/issues\///')
            echo "  Found issues: $PR_ISSUES"
        
            ISSUE_NUMBERS="$ISSUE_NUMBERS $PR_ISSUES"
          fi
        done
        
        # Comment on each issue found
        echo "$ISSUE_NUMBERS" | tr ' ' '\n' | while read -r issue_number; do
          if [ -n "$issue_number" ]; then
            echo "Commenting on issue #$issue_number"
            gh issue comment "$issue_number" --body "A change related to this issue was included in release: $CURRENT_TAG" || echo "::error Failed to comment on #$issue_number"
          fi
        done